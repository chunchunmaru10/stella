generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Character {
  name               String              @id
  thumbnail          String
  rarity             Int
  releaseDate        DateTime
  sets               Set[]
  characterSubstats  CharacterSubstat[]
  characterMainStats CharacterMainStat[]
}

model Set {
  name       String      @id
  thumbnail  String
  characters Character[]
  pieces     Piece[]
}

model Stat {
  name               String              @id
  thumbnail          String
  sortOrder          Int
  canBeSubstats      Boolean
  characterSubstats  CharacterSubstat[]
  characterMainStats CharacterMainStat[]
  types              Type[]
  mainStatScalings   StatScaling[]       @relation("mainStatScalings")
  subStatScalings    StatScaling[]       @relation("subStatScalings")
}

model Piece {
  name      String @id
  thumbnail String
  typeName  String
  type      Type   @relation(fields: [typeName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  setName   String
  set       Set    @relation(fields: [setName], references: [name], onDelete: Cascade, onUpdate: Cascade)
}

model Type {
  name              String              @id
  thumbnail         String
  sortOrder         Int
  characterMainStat CharacterMainStat[]
  pieces            Piece[]
  stats             Stat[]
}

model CharacterSubstat {
  character     Character @relation(fields: [characterName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  stat          Stat      @relation(fields: [statName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  priority      Int
  characterName String
  statName      String

  @@id([characterName, statName])
}

model CharacterMainStat {
  character     Character @relation(fields: [characterName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  type          Type      @relation(fields: [typeName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  stat          Stat      @relation(fields: [statName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  characterName String
  typeName      String
  statName      String

  @@id([characterName, typeName, statName])
}

model Rarity {
  rarity      Int           @id
  StatScaling StatScaling[]
}

model StatScaling {
  rarity       Rarity @relation(fields: [rarityId], references: [rarity])
  mainStat     Stat?  @relation("mainStatScalings", fields: [statName], references: [name], map: "mainStatScalings")
  subStat      Stat?  @relation("subStatScalings", fields: [statName], references: [name], map: "subStatScalings")
  rarityId     Int
  statName     String
  initialValue Float
  scalingvalue Float

  @@id([rarityId, statName, initialValue])
}
