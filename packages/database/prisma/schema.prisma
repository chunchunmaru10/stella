generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Character {
  name               String              @id
  thumbnail          String
  rarity             Int
  releaseDate        DateTime
  sets               Set[]
  characterSubstats  CharacterSubstat[]
  characterMainStats CharacterMainStat[]
  lastAutoRunAt      DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
}

model Set {
  name       String      @id
  thumbnail  String
  characters Character[]
  pieces     Piece[]
}

model Stat {
  name               String              @id
  alternateNames     String[]
  thumbnail          String
  sortOrder          Int
  canBeSubstats      Boolean
  displayPercentage  Boolean             @default(true)
  characterSubstats  CharacterSubstat[]
  characterMainStats CharacterMainStat[]
  types              Type[]
  mainStatScalings   MainStatScaling[]
  subStatScalings    SubstatScaling[]
}

model Piece {
  name      String @id
  thumbnail String
  typeName  String
  type      Type   @relation(fields: [typeName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  setName   String
  set       Set    @relation(fields: [setName], references: [name], onDelete: Cascade, onUpdate: Cascade)
}

model Type {
  name              String              @id
  thumbnail         String
  sortOrder         Int
  characterMainStat CharacterMainStat[]
  pieces            Piece[]
  stats             Stat[]
}

model CharacterSubstat {
  character     Character @relation(fields: [characterName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  stat          Stat      @relation(fields: [statName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  priority      Int
  characterName String
  statName      String

  @@id([characterName, statName])
}

model CharacterMainStat {
  character     Character @relation(fields: [characterName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  type          Type      @relation(fields: [typeName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  stat          Stat      @relation(fields: [statName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  characterName String
  typeName      String
  statName      String

  @@id([characterName, typeName, statName])
}

model Rarity {
  rarity            Int               @id
  maxLevel          Int
  baseSubstatAmount Int               @default(0)
  maxSubstatAmount  Int               @default(0)
  StatScaling       MainStatScaling[]
  SubstatScaling    SubstatScaling[]
}

model MainStatScaling {
  rarity       Rarity @relation(fields: [rarityId], references: [rarity])
  stat         Stat   @relation(fields: [statName], references: [name])
  rarityId     Int
  statName     String
  baseValue    Float
  scalingValue Float

  @@id([rarityId, statName])
}

model SubstatScaling {
  Stat         Stat   @relation(fields: [statName], references: [name])
  rarity       Rarity @relation(fields: [rarityId], references: [rarity])
  statName     String
  rarityId     Int
  scalingValue Float

  @@id([statName, rarityId, scalingValue])
}

model Announcement {
  message   String   @id
  createdAt DateTime @default(now())
}
